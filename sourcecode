# Importing Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Import Dataset

dataset = pd.read_csv("Advertisement.csv")

x = dataset.iloc[ : , [2,3]].values
y = dataset.iloc[ : ,4].values

# Splitting Dataset into traiing and test set

from sklearn.cross_validation import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25,
                                                    random_state = 0)


# Feature Scaling

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

x_train = sc.fit_transform(x_train)

x_test = sc.transform(x_test)


# Fitting Decision Tree on training set

from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier(criterion= "entropy", random_state= 0)

classifier.fit(x_train, y_train)

# Predicting Test Set Results

y_pred = classifier.predict(x_test)

# Make Confusion matrix

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

cm




###################################################


from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier(criterion = "entropy", random_state = 0,
                                    min_samples_split = 50)

classifier.fit(x_train, y_train)

# Predictions

y_pred = classifier.predict(x_test)



# Confusion Matrix

from sklearn.metrics import confusion_matrix

cm1 = confusion_matrix(y_test,y_pred)

cm1



# Visualising training set results

from matplotlib.colors import ListedColormap

x_set , y_set = x_train, y_train
X1, X2 = np.meshgrid(np.arange(start = x_set[:,0].min() - 1, stop = x_set[:,0].max() +1, step = 0.01),
                     np.arange(start = x_set[:,1].min() - 1, stop = x_set[:,1].max() +1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(("red", "green")))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set ==j , 0], x_set[y_set == j, 1],
                c = ListedColormap(("blue", "green"))(i), label = j)
plt.title("Decision Tree Classification (Training set)")
plt.xlabel("Age")
plt.ylabel("Estimated Salary")
plt.legend()
plt.show()


# Visualising test set results

from matplotlib.colors import ListedColormap

x_set , y_set = x_test, y_test
X1, X2 = np.meshgrid(np.arange(start = x_set[:,0].min() - 1, stop = x_set[:,0].max() +1, step = 0.01),
                     np.arange(start = x_set[:,1].min() - 1, stop = x_set[:,1].max() +1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(("red", "green")))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(x_set[y_set ==j , 0], x_set[y_set == j, 1],
                c = ListedColormap(("blue", "green"))(i), label = j)
plt.title("Decision Tree Classification (Test set)")
plt.xlabel("Age")
plt.ylabel("Estimated Salary")
plt.legend()
plt.show()






# Plot Tree


from sklearn.tree import export_graphviz

export_graphviz(classifier, out_file = "1.dot", 
                feature_names = ["Age", "Estimated Salary"])

